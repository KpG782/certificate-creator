---
// filepath: src/components/BatchPanel.astro
---

<div id="batch-mode-content" class="hidden">
  <div class="grid lg:grid-cols-2 gap-8">
    <!-- Left: Upload & Controls -->
    <div class="space-y-6">
      <div class="bg-white rounded-xl shadow-lg p-6">
        <h2 class="text-2xl font-semibold text-gray-800 mb-4 flex items-center gap-2">
          <i data-lucide="package" class="w-6 h-6"></i>
          Batch Certificate Generation
        </h2>
        
        <!-- JSON Upload -->
        <div class="border-2 border-dashed border-gray-300 rounded-lg p-8 text-center hover:border-blue-400 transition mb-4 cursor-pointer">
          <input type="file" id="json-upload" accept=".json" class="hidden" />
          <label for="json-upload" class="cursor-pointer">
            <div class="flex flex-col items-center">
              <i data-lucide="file-json" class="w-16 h-16 text-blue-500 mb-3"></i>
              <p class="text-gray-600 mb-2 font-medium flex items-center gap-2">
                <i data-lucide="upload" class="w-4 h-4"></i>
                Click to upload JSON file
              </p>
              <p class="text-sm text-gray-500">or drag and drop</p>
            </div>
          </label>
        </div>

        <div id="json-status" class="text-sm text-center hidden mb-4"></div>

        <button id="download-sample-json" class="w-full px-4 py-3 bg-gray-600 text-white rounded-lg hover:bg-gray-700 transition font-medium mb-4 flex items-center justify-center gap-2">
          <i data-lucide="download" class="w-4 h-4"></i>
          Download Sample JSON Template
        </button>
      </div>

      <!-- Signatures for Batch -->
      <div class="bg-white rounded-xl shadow-lg p-6">
        <h2 class="text-xl font-semibold text-gray-800 mb-4 flex items-center gap-2">
          <i data-lucide="pen-tool" class="w-5 h-5"></i>
          E-Signatures (Apply to All)
        </h2>
        <div class="space-y-4">
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-2 flex items-center gap-2">
              <i data-lucide="award" class="w-4 h-4"></i>
              Dean Signature
            </label>
            <input 
              type="file" 
              id="batch-dean-signature" 
              accept="image/*" 
              class="w-full text-sm text-gray-500 file:mr-4 file:py-2 file:px-4 file:rounded-lg file:border-0 file:text-sm file:font-semibold file:bg-blue-50 file:text-blue-700 hover:file:bg-blue-100" 
            />
          </div>
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-2 flex items-center gap-2">
              <i data-lucide="user-check" class="w-4 h-4"></i>
              Organizer Signature
            </label>
            <input 
              type="file" 
              id="batch-organizer-signature" 
              accept="image/*" 
              class="w-full text-sm text-gray-500 file:mr-4 file:py-2 file:px-4 file:rounded-lg file:border-0 file:text-sm file:font-semibold file:bg-blue-50 file:text-blue-700 hover:file:bg-blue-100" 
            />
          </div>
        </div>
      </div>

      <!-- Progress -->
      <div id="batch-progress-section" class="bg-white rounded-xl shadow-lg p-6 hidden">
        <h3 class="text-lg font-semibold text-gray-800 mb-3 flex items-center gap-2">
          <i data-lucide="activity" class="w-5 h-5"></i>
          Progress
        </h3>
        <div class="w-full bg-gray-200 rounded-full h-4 mb-2">
          <div id="progress-bar" class="bg-blue-600 h-4 rounded-full transition-all flex items-center justify-center" style="width: 0%">
          </div>
        </div>
        <p class="text-sm text-gray-600 text-center flex items-center justify-center gap-2">
          <i data-lucide="clock" class="w-4 h-4"></i>
          <span id="progress-text">Preparing...</span>
          <span id="progress-count" class="font-semibold ml-2"></span>
        </p>
      </div>

      <!-- Generate Button -->
      <div class="bg-white rounded-xl shadow-lg p-6">
        <button 
          id="batch-generate-btn" 
          disabled 
          class="w-full px-12 py-4 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition font-bold shadow-lg text-lg disabled:bg-gray-400 disabled:cursor-not-allowed flex items-center justify-center gap-2"
        >
          <i data-lucide="zap" class="w-6 h-6"></i>
          Generate All Certificates
        </button>
      </div>
    </div>

    <!-- Right: Participants Table -->
    <div class="bg-white rounded-xl shadow-lg p-6">
      <h2 class="text-2xl font-semibold text-gray-800 mb-4 flex items-center gap-2">
        <i data-lucide="users" class="w-6 h-6"></i>
        Participants List
      </h2>
      <div id="participants-table-container" class="overflow-auto max-h-[600px]">
        <div class="text-center py-8">
          <i data-lucide="inbox" class="w-16 h-16 text-gray-300 mx-auto mb-3"></i>
          <p class="text-gray-500">No participants loaded yet.</p>
          <p class="text-sm text-gray-400 mt-1">Upload a JSON file to see the list.</p>
        </div>
      </div>
    </div>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const jsonUpload = document.getElementById('json-upload') as HTMLInputElement | null;
    const tableContainer = document.getElementById('participants-table-container') as HTMLDivElement | null;
    const jsonStatus = document.getElementById('json-status') as HTMLDivElement | null;

    // Initialize Lucide icons
    if (typeof lucide !== 'undefined') {
      lucide.createIcons();
    }

    jsonUpload?.addEventListener('change', (e: Event) => {
      const file = (e.target as HTMLInputElement).files?.[0];
      if (!file || !tableContainer) return;

      // Show loading state
      tableContainer.innerHTML = `
        <div class="text-center py-8">
          <i data-lucide="loader" class="w-16 h-16 text-blue-500 mx-auto mb-3 animate-spin"></i>
          <p class="text-gray-600">Loading participants...</p>
        </div>
      `;
      if (typeof lucide !== 'undefined') {
        lucide.createIcons();
      }

      const reader = new FileReader();
      reader.onload = (event: ProgressEvent<FileReader>) => {
        try {
          const data = JSON.parse(event.target?.result as string);
          const participants = data.participants;

          if (!Array.isArray(participants) || participants.length === 0) {
            throw new Error('Invalid data: participants array is empty or missing');
          }

          // Build table with icons
          let tableHTML = `
            <table class="w-full text-sm">
              <thead class="bg-gray-100 sticky top-0">
                <tr>
                  <th class="px-3 py-2 text-left">
                    <i data-lucide="hash" class="w-4 h-4 inline"></i>
                  </th>
                  <th class="px-3 py-2 text-left">
                    <i data-lucide="user" class="w-4 h-4 inline mr-1"></i>
                    Name
                  </th>
                  <th class="px-3 py-2 text-left">
                    <i data-lucide="mail" class="w-4 h-4 inline mr-1"></i>
                    Email
                  </th>
                  <th class="px-3 py-2 text-left">
                    <i data-lucide="tag" class="w-4 h-4 inline mr-1"></i>
                    Category
                  </th>
                  <th class="px-3 py-2 text-left">
                    <i data-lucide="book-open" class="w-4 h-4 inline mr-1"></i>
                    Seminar
                  </th>
                  <th class="px-3 py-2 text-left">
                    <i data-lucide="calendar" class="w-4 h-4 inline mr-1"></i>
                    Date
                  </th>
                </tr>
              </thead>
              <tbody class="divide-y">
          `;

          participants.forEach((p: any, i: number) => {
            const categoryColor = p.category === 'Student' 
              ? 'bg-blue-100 text-blue-800' 
              : p.category === 'Faculty' 
              ? 'bg-purple-100 text-purple-800'
              : 'bg-green-100 text-green-800';

            tableHTML += `
              <tr class="hover:bg-gray-50">
                <td class="px-3 py-2 text-gray-500">${i + 1}</td>
                <td class="px-3 py-2 font-medium flex items-center gap-2">
                  <i data-lucide="user-circle" class="w-4 h-4 text-gray-400"></i>
                  ${p.name}
                </td>
                <td class="px-3 py-2 text-xs text-gray-600">
                  <span class="flex items-center gap-1">
                    <i data-lucide="at-sign" class="w-3 h-3"></i>
                    ${p.email || 'N/A'}
                  </span>
                </td>
                <td class="px-3 py-2">
                  <span class="px-2 py-1 ${categoryColor} rounded text-xs font-medium flex items-center gap-1 w-fit">
                    <i data-lucide="badge" class="w-3 h-3"></i>
                    ${p.category || 'N/A'}
                  </span>
                </td>
                <td class="px-3 py-2 max-w-xs truncate" title="${p.seminarTitle}">
                  ${p.seminarTitle}
                </td>
                <td class="px-3 py-2 text-gray-600 flex items-center gap-1">
                  <i data-lucide="calendar-days" class="w-3 h-3"></i>
                  ${p.eventDate}
                </td>
              </tr>
            `;
          });

          tableHTML += '</tbody></table>';
          tableContainer.innerHTML = tableHTML;

          // Show success status
          if (jsonStatus) {
            jsonStatus.innerHTML = `
              <div class="bg-green-50 border border-green-200 rounded-lg p-3 flex items-center justify-center gap-2 text-green-700">
                <i data-lucide="check-circle" class="w-5 h-5"></i>
                <span class="font-medium">Successfully loaded ${participants.length} participant(s)</span>
              </div>
            `;
            jsonStatus.classList.remove('hidden');
          }

          // Enable generate button
          const generateBtn = document.getElementById('batch-generate-btn') as HTMLButtonElement | null;
          if (generateBtn) {
            generateBtn.disabled = false;
          }

          // Reinitialize Lucide icons
          if (typeof lucide !== 'undefined') {
            lucide.createIcons();
          }

        } catch (error) {
          console.error('JSON Parse Error:', error);
          
          // Show error state
          if (tableContainer) {
            tableContainer.innerHTML = `
              <div class="text-center py-8">
                <i data-lucide="alert-circle" class="w-16 h-16 text-red-400 mx-auto mb-3"></i>
                <p class="text-red-500 font-medium">Invalid JSON format</p>
                <p class="text-sm text-gray-500 mt-2">Please check your file and try again.</p>
              </div>
            `;
          }

          // Show error status
          if (jsonStatus) {
            jsonStatus.innerHTML = `
              <div class="bg-red-50 border border-red-200 rounded-lg p-3 flex items-center justify-center gap-2 text-red-700">
                <i data-lucide="x-circle" class="w-5 h-5"></i>
                <span class="font-medium">Error: ${error instanceof Error ? error.message : 'Unknown error'}</span>
              </div>
            `;
            jsonStatus.classList.remove('hidden');
          }

          // Reinitialize Lucide icons
          if (typeof lucide !== 'undefined') {
            lucide.createIcons();
          }
        }
      };

      reader.onerror = () => {
        if (tableContainer) {
          tableContainer.innerHTML = `
            <div class="text-center py-8">
              <i data-lucide="file-x" class="w-16 h-16 text-red-400 mx-auto mb-3"></i>
              <p class="text-red-500 font-medium">Failed to read file</p>
              <p class="text-sm text-gray-500 mt-2">Please try again.</p>
            </div>
          `;
        }
        if (typeof lucide !== 'undefined') {
          lucide.createIcons();
        }
      };

      reader.readAsText(file);
    });

    // Download sample JSON
    const downloadSampleBtn = document.getElementById('download-sample-json');
    downloadSampleBtn?.addEventListener('click', () => {
      const sampleData = {
        participants: [
          {
            name: "John Doe",
            email: "john.doe@umak.edu.ph",
            category: "Student",
            seminarTitle: "Web Development Fundamentals",
            eventDate: "October 15, 2025",
            location: "HPSB 1012",
            organizerName: "Prof. Jane Smith",
            deanName: "Prof. Michael Brown"
          },
          {
            name: "Jane Smith",
            email: "jane.smith@umak.edu.ph",
            category: "Faculty",
            seminarTitle: "Web Development Fundamentals",
            eventDate: "October 15, 2025",
            location: "HPSB 1012",
            organizerName: "Prof. Jane Smith",
            deanName: "Prof. Michael Brown"
          }
        ]
      };

      const blob = new Blob([JSON.stringify(sampleData, null, 2)], { 
        type: 'application/json' 
      });
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = 'certificate-sample.json';
      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);
      URL.revokeObjectURL(url);
    });
  });
</script>